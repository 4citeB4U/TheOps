

const CACHE_NAME = 'lex-academic-copilot-cache-v2';
// App Shell: Core files for the app to work offline
const APP_SHELL_URLS = [
  './',
  './index.html',
  './manifest.json',
];

// This would ideally be dynamically generated by a build tool like Workbox
const STATIC_ASSET_URLS = [
    'https://cdn.tailwindcss.com',
    'https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800;900&display=swap',
    './logo192.png',
    './logo512.png',
];

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Opened cache and caching app shell and static assets');
        // Cache the app shell and static assets together.
        const allUrlsToCache = [...APP_SHELL_URLS, ...STATIC_ASSET_URLS];
        return cache.addAll(allUrlsToCache);
      })
      .then(() => {
        // Force the waiting service worker to become the active service worker.
        return self.skipWaiting();
      })
  );
});

self.addEventListener('activate', (event) => {
  // Clean up old caches
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
        // Take control of all pages under this SW's scope immediately.
        return self.clients.claim();
    })
  );
});

self.addEventListener('fetch', (event) => {
  const { request } = event;

  // For navigation requests, use a Network First strategy to ensure users get the latest HTML.
  // Fallback to cache if offline.
  if (request.mode === 'navigate') {
    event.respondWith(
      fetch(request)
        .then(response => {
          // If the fetch is successful, clone the response and cache it before returning.
          const responseToCache = response.clone();
          caches.open(CACHE_NAME).then(cache => {
            cache.put(request, responseToCache);
          });
          return response;
        })
        .catch(() => {
          // If fetch fails (offline), try to get it from the cache.
          return caches.match(request);
        })
    );
    return;
  }
  
  // For other requests (CSS, JS, images), use a Cache First strategy.
  // StaleWhileRevalidate would also be a good choice for JS/CSS.
  event.respondWith(
    caches.match(request)
      .then((response) => {
        // If we have a cached response, return it.
        if (response) {
          return response;
        }
        // Otherwise, fetch from the network.
        return fetch(request).then(networkResponse => {
            // And cache the new response for future use.
            const responseToCache = networkResponse.clone();
            caches.open(CACHE_NAME).then(cache => {
                cache.put(request, responseToCache);
            });
            return networkResponse;
        });
      })
  );
});